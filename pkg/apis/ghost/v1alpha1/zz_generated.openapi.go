// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostApp":       schema_pkg_apis_ghost_v1alpha1_GhostApp(ref),
		"fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostAppSpec":   schema_pkg_apis_ghost_v1alpha1_GhostAppSpec(ref),
		"fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostAppStatus": schema_pkg_apis_ghost_v1alpha1_GhostAppStatus(ref),
	}
}

func schema_pkg_apis_ghost_v1alpha1_GhostApp(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GhostApp is the Schema for the ghostapps API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostAppSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostAppStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostAppSpec", "fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostAppStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_ghost_v1alpha1_GhostAppSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GhostAppSpec defines the desired state of GhostApp",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Ghost deployment repicas",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Ghost container image, by default using latest ghost image from docker hub registry. NOTE: This operator only support ghost image from docker official image. https://hub.docker.com/_/ghost/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "Ghost configuration. This field will be written as ghost configuration. Saved in configmap and mounted in /etc/ghost/config/config.json and symlinked to /var/lib/ghost/config.production.json",
							Ref:         ref("fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostConfigSpec"),
						},
					},
					"persistent": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostPersistentSpec"),
						},
					},
					"ingress": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostIngressSpec"),
						},
					},
				},
				Required: []string{"config"},
			},
		},
		Dependencies: []string{
			"fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostConfigSpec", "fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostIngressSpec", "fossil.or.id/ghost-operator/pkg/apis/ghost/v1alpha1.GhostPersistentSpec"},
	}
}

func schema_pkg_apis_ghost_v1alpha1_GhostAppStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GhostAppStatus defines the observed state of GhostApp",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a ghostapp current state.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}
